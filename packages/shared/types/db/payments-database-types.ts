/**
 * This file was generated by kysely-codegen.
 * Please do not edit it manually.
 */

import type { ColumnType } from "kysely";

export type Generated<T> = T extends ColumnType<infer S, infer I, infer U>
  ? ColumnType<S, I | undefined, U>
  : ColumnType<T, T | undefined, T>;

export type Int8 = ColumnType<string, bigint | number | string, bigint | number | string>;

export type Numeric = ColumnType<string, number | string, number | string>;

export type PaymentCryptoTonStatus = "cancelled" | "captured" | "created" | "failed" | "received";

export type PaymentStatus = "canceled" | "pending" | "succeeded" | "waitingForCapture";

export type Timestamp = ColumnType<Date, Date | string, Date | string>;

export interface CronJob {
  active: Generated<boolean>;
  command: string;
  database: Generated<string>;
  jobid: Generated<Int8>;
  jobname: string | null;
  nodename: Generated<string>;
  nodeport: Generated<number>;
  schedule: string;
  username: Generated<string>;
}

export interface CronJobRunDetails {
  command: string | null;
  database: string | null;
  end_time: Timestamp | null;
  job_pid: number | null;
  jobid: Int8 | null;
  return_message: string | null;
  runid: Generated<Int8>;
  start_time: Timestamp | null;
  status: string | null;
  username: string | null;
}

export interface Payments {
  asset: string;
  created_at: Generated<Timestamp>;
  id: Generated<number>;
  initiator: string;
  invoice_id: number;
  order_id: string;
  pay_url: string;
  payload: string;
  price: string;
  status: PaymentStatus;
  unique_id: string;
}

export interface PaymentsCrypto {
  created_at: Generated<Timestamp | null>;
  currency: string;
  id: Generated<string>;
  nickname: string;
  orderid: string;
  payment_type: string;
  payment_value: string;
  price: Numeric;
  status: PaymentCryptoTonStatus;
}

export interface PaymentsFiat {
  created_at: Generated<Timestamp | null>;
  id: Generated<string>;
  nickname: string;
  orderid: string;
  payment_type: string;
  payment_value: string;
  price: Int8;
  status: PaymentStatus;
}

export interface DB {
  "cron.job": CronJob;
  "cron.job_run_details": CronJobRunDetails;
  payments: Payments;
  payments_crypto: PaymentsCrypto;
  payments_fiat: PaymentsFiat;
}
